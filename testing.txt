from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.microsoft import EdgeChromiumDriverManager
import time

chrome_options = Options()
chrome_options.add_argument("--headless")  # remove this line to see the browser
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")
service = Service(EdgeChromiumDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)
url = "https://www.bi.go.id/id/statistik/informasi-kurs/jisdor/default.aspx"
driver.get(url)
time.sleep(2)  # wait for JS to load
while True:
    rows = driver.find_elements(By.CSS_SELECTOR, "table tr")
    for row in rows:
        cells = [cell.text.strip() for cell in row.find_elements(By.TAG_NAME, "td")]
        if cells:
            print(cells)
    try:
        next_btn = driver.find_element(By.LINK_TEXT, ">")
        if "disabled" in next_btn.get_attribute("class"):
            break  # no more pages
        next_btn.click()
        time.sleep(2)  # wait for page to load
    except:
        break  # no next button found, stop loop
driver.quit()
'''

'''
import requests
from bs4 import BeautifulSoup
import time

url = "https://www.bi.go.id/id/statistik/informasi-kurs/jisdor/default.aspx"
headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")
rows = soup.find_all("tr")
for row in rows:
    cells = [cell.text.strip() for cell in row.find_all("td")]
    if cells:
        print(cells)
'''

'''
import yfinance as yf
ticker = yf.Ticker("AAPL")
data = yf.download("AAPL", start="2024-01-01", end="2025-01-01", interval="1d")
print("Historical Price Data:\n", data.head(), "\n")
info = ticker.info
print("Ticker Info:\n", info, "\n")
dividends = ticker.dividends
print("Dividends:\n", dividends, "\n")
splits = ticker.splits
print("Stock Splits:\n", splits, "\n")
financials = ticker.financials
balance_sheet = ticker.balance_sheet
cashflow = ticker.cashflow
print("Income Statement:\n", financials, "\n")
print("Balance Sheet:\n", balance_sheet, "\n")
print("Cash Flow Statement:\n", cashflow, "\n")
actions = ticker.actions
print("Actions:\n", actions, "\n")
recommendations = ticker.recommendations
print("Analyst Recommendations:\n", recommendations.tail(), "\n")
earnings = ticker.earnings
print("Earnings:\n", earnings, "\n")
sustainability = ticker.sustainability
print("Sustainability:\n", sustainability, "\n")
options = ticker.options
print("Option Expiration Dates:\n", options, "\n")

from tradingview_ta import TA_Handler, Interval
handler = TA_Handler(symbol="AAPL", screener="america", exchange="NASDAQ", interval=Interval.INTERVAL_1_DAY)
analysis = handler.get_analysis()
print(analysis.indicators)

from googlefinance import getQuotes #discontinued
import json
print(json.dumps(getQuotes('AAPL'), indent=2))

import requests
from bs4 import BeautifulSoup
url = "https://www.google.com/finance/quote/AAPL:NASDAQ"
headers = {"User-Agent": "Mozilla/5.0"}
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")
price = soup.find("div", class_="YMlKec fxKbKc").text
print("AAPL Current Price:", price)